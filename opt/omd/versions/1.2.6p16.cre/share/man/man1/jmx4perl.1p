.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JMX4PERL 1p"
.TH JMX4PERL 1p "2016-01-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
jmx4perl \- JMX access tools and modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  jmx4perl .... http://server:8080/jolokia ["info"] 
\&
\&  jmx4perl .... <agent\-url> read <mbean\-name> <attribute\-name> [path] 
\&
\&  jmx4perl .... <agent\-url> write <mbean\-name> <attribute\-name> <value> [path]
\&
\&  jmx4perl .... <agent\-url> exec <mbean\-name> <operation> <arg1> <arg2> ...
\&
\&  jmx4perl .... <agent\-url> search <mbean pattern>
\&
\&  jmx4perl .... <agent\-url> list [<domain\-name>[:<mbean name>]]
\&
\&  jmx4perl .... <agent\-url> attributes [max\-depth max\-list\-size max\-objects] 
\&
\&  jmx4perl .... aliases
\&
\&  jmx4perl .... encrypt <password>
\&
\&  jmx4perl \-\-help
\&
\&  jmx4perl \-\-version [<agent\-url>]
.Ve
.PP
Options:
.PP
.Vb 10
\&   \-\-product <id>          Product to use for aliasing (ommits autodetection)
\&   \-\-user <user>           Credential used for authentication   
\&   \-\-password <pwd>  
\&   \-\-proxy <url>           URL to proxy
\&   \-\-proxy\-user <user>     Authentication information for a proxy
\&   \-\-proxy\-password <pwd>
\&   \-\-target <jmx\-url>      JSR\-160 JMX Service URL to be used as the target server
\&   \-\-target\-user <user>    Credential for the target server if \-\-target is given
\&   \-\-target\-password <pwd> 
\&   \-\-config                Path to an optional configuration file (default: ~/.j4p)
\&   \-\-history               Print out the history of return values (if switched on and present)
\&   \-\-legacy\-escape         Used for contacting pre 1.0 Jolokia agent for MBeans containing 
\&                           slashes in their name.
\&   \-\-method <get|post>     Method to be used for HTTP request ("get" or "post")
\&   \-\-option key=val        Options for tuning the output of jmx4perl. Known keys are
\&                              format   : Either \*(Aqjson\*(Aq or \*(Aqdata\*(Aq
\&                              booleans : Pair of strings separated by slash to use for printing 
\&                                         boolean values (Default: [true]/[false])
\&                              indent   : Space indent when printing complex data structures 
\&   \-\-verbose               Print out more information
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBjmx4perl\fR is a command line utility for an easy access of an instrumented
application server. Before you can use this tool, you need to deploy a small
agent application. In the following \f(CW\*(C`agent\-url\*(C'\fR is the \s-1URL\s0 for accessing this
agent. If you use a configuration file, you can use also a symbolic name as
stored in the configuration file. See JMX::Jmx4Perl::Manual for details.
.PP
With the \f(CW\*(C`\-\-option\*(C'\fR (or \f(CW\*(C`\-o\*(C'\fR for short) the output of \fBjmx4perl\fR can be
tuned. I.e. the way boolean values are printed can be tuned as well as the 
data format to use for complex data structure. The known options are
.IP "format" 4
.IX Item "format"
the value an be either \f(CW\*(C`json\*(C'\fR or <data> for printing out complex data as \s-1JSON\s0
or as a Perl data structure. Default is \*(L"data\*(R".
.IP "booleans" 4
.IX Item "booleans"
Specify the pair of strings to use for boolean values for the \f(CW\*(C`data\*(C'\fR output
format. The value of this option should be given as a string separated with a
\&\f(CW\*(C`/\*(C'\fR. The default value is \f(CW\*(C`[true]/[false]\*(C'\fR.
.IP "method" 4
.IX Item "method"
Specify the \s-1HTTP\s0 method to use for requesting the server. This can either be
\&\f(CW\*(C`get\*(C'\fR or \f(CW\*(C`post\*(C'\fR. By default \*(L"get\*(R" is used.
.IP "legacy-escape" 4
.IX Item "legacy-escape"
Prior to version 1.0 Jolokia used a different escaping scheme for \s-1GET\s0 requests
which contains slashes. This option must be used, when the server-side agent
has a version < 1.0 and the MBean name contains slashes (\*(L"/\*(R"). Alternatively,
\&\f(CW\*(C`\-\-method post\*(C'\fR can be used, since the post method doesn't suffer from any
escaping issues.
.IP "indent" 4
.IX Item "indent"
Number of spaces to use for indenting the output of complex data
structures. Default are 4 spaces.
.PP
The options can be also put into the configuration file in a section called
\&\f(CW\*(C`Jmx4Perl\*(C'\fR. For example:
.PP
.Vb 3
\&    <Jmx4Perl>
\&      # \*(Aqjson\*(Aq or \*(Aqdata\*(Aq
\&      Format json
\& 
\&      # Boolean values: Default is [true]/[false]
\&      Booleans 0/1
\&
\&      # Number of spaces to indent for complex 
\&      # data structures
\&      Indent 4
\&    </Jmx4Perl>
.Ve
.PP
\&\fBjmx4perl\fR serves also an example of how to use the JMX::Jmx4Perl package.
See its documentation for more details on how to embed \s-1JMX\s0 access into your
programs.
.SH "COMMANDS"
.IX Header "COMMANDS"
.SS "info"
.IX Subsection "info"
If you use jmx4perl without any command or with \f(CW\*(C`info\*(C'\fR as command, you get a
description about the server, including the application server's product name
and version. This works by autodetection and only for the supported application
servers (see JMX::Jmx4Perl::Manual for a list of supported products). The
only argument required is the url which points to the deployed jmx4perl agent.
.PP
With \f(CW\*(C`\-\-verbose\*(C'\fR \f(CW\*(C`info\*(C'\fR prints the system properties and runtime arguments as
well.
.SS "list"
.IX Subsection "list"
List meta data of all registered mbeans on the target application server. This
includes attributes and operations along whith their descriptions and
parameters (as far as they are provided by mbean's info).
.PP
You can provide an inner path as an additional argument as well. See
JMX::Jmx4Perl::Request for an explanation about inner paths (in short, it's
some sort of XPath expression which selects only a subset of all MBeans and
their values). See JMX::Jmx4Perl, method \*(L"\fIlist()\fR\*(R" for a more rigorous
documentation abouting listing of MBeans.
.SS "attributes"
.IX Subsection "attributes"
Show all attributes of all registerd mbeans and their values. For simple scalar
values they are shown on one line, for more complex data structures,
Data::Dumper is used. Please note, that it is normal, that for certain
attributes an error is returned (i.e. when this attribute is not implemented on
the server side e.g. or an MXMbean). To see the full server side stacktrace for
this errors, use \f(CW\*(C`\-\-verbose\*(C'\fR as command line option
.PP
The attribute list can get quite large (moren than 200 \s-1MB\s0 for JBoss 5). To
restrict the output you can use the following extra optional parameters (given
in this order):
.IP "maxDepth" 4
.IX Item "maxDepth"
Maximum nesting level of the returned \s-1JSON\s0 structure for a certain MBean
(default: 5)
.IP "maxCollectionSize" 4
.IX Item "maxCollectionSize"
Maximum size of a collection after which it gets truncated (default: 150)
.IP "maxObjects" 4
.IX Item "maxObjects"
Maximum overall objects to fetch for a certain MBean (default: 1000)
.PP
In the case of truncation, the \s-1JSON\s0 answer contains marker entries like
\&\f(CW\*(C`[Object limit exceeded]\*(C'\fR or \f(CW\*(C`[Depth limit ...]\*(C'\fR. Loops are detected, too
which results in markers of the form \f(CW\*(C`[Reference ...]\*(C'\fR
.SS "read / get"
.IX Subsection "read / get"
Read an \s-1JMX\s0 attribute's value and print it out. The required arguments are the
MBean's name and the attribute's name. Additionally, you can provide a \fIpath\fR
within the return value to pick a sub-value. See JMX::Jmx4Perl::Request for a
detailed explanation of paths.
.PP
The MBean's name and the attribute can be substituted by an
alias name, too.
.PP
For a single value, the value itself is printed (without additional newline),
for a more complex data structure, Data::Dumper is used.
.PP
If the option \f(CW\*(C`\-\-history\*(C'\fR is given and history tracking is switched on (see
below), then the stored history is printed as well.
.SS "write / set"
.IX Subsection "write / set"
Write a \s-1JMX\s0 attribute's value and print out the value as it is returned from
the server. The required arguments are the MBean's name, the attribute and the
value to set. Optionally, a inner path can be provided as well in which case a
inner value is set. The MBean's name and the attribute can be substituted by an
alias name, too. See also \*(L"aliases\*(R" for getting all available aliases.
.PP
The old value of the attribute (or the object pointed to by the inner path) is
printed out in the same as for \*(L"read\*(R"
.PP
To set a \f(CW\*(C`null\*(C'\fR value use \*(L"[null]\*(R" as argument, to set an empty string use an
empty argument (i.e. \f(CW""\fR on the command line). These values are interpreted
special, so you can't use them literally as values.
.PP
If the option \f(CW\*(C`\-\-history\*(C'\fR is given and history tracking is switched on (see
below), then the stored history is printed as well.
.SS "exec / call"
.IX Subsection "exec / call"
Execute a \s-1JMX\s0 operation. The required arguments are the MBean's name, the name
of the operation to execute and the arguments required for this operations
(which can be empty if the operation doesn't take any arguments). The return
value is the return value of the operation which can be \f(CW\*(C`undef\*(C'\fR in the case of
a void operation.
.PP
A operation alias can also be used for the MBean's name and operation.
.PP
To use a \f(CW\*(C`null\*(C'\fR argument use \*(L"[null]\*(R", to set an empty string as argument use
an empty argument (i.e. \f(CW""\fR) on the command line. These values are
interpreted special, so you can't use them literally as values.
.PP
For a single return value, the value itself is printed (without additional
newline), for a more complex data structure, Data::Dumper is used.
.PP
If the option \f(CW\*(C`\-\-history\*(C'\fR is given and history tracking is switched on (see
below), then the stored history is printed as well.
.SS "aliases"
.IX Subsection "aliases"
Print out all known aliases. See JMX::Jmx4Perl::Manual for a discussion
about aliases. In short, you can use an alias as a shortcut for an MBean's
and attribute's name.
.SS "search"
.IX Subsection "search"
Search for a certain MBean. As argument you should provide a pattern like
\&\f(CW\*(C`*:j2eeType=Servlet,*\*(C'\fR. I.e you can use the wildcard \f(CW\*(C`*\*(C'\fR for the domain
name part, and properties as a whole (but not within a key=property tuple). See
<http://java.sun.com/j2se/1.5.0/docs/api/javax/management/ObjectName.html> for
a complete explanation of how a pattern can look like. As a result of this
operation, a list of fully qualified MBean names is printed out line by line
which match the given pattern.
.SS "encrypt"
.IX Subsection "encrypt"
Encrypt a given password so that it can be stored in its encrypted form in a
configuration file. Please note, that this is by no means secure and only usual
to avoid casual discovery of the password. Since jmx4perl acts as a client it
needs to be able to decrypt the password on its own when contacting the agent,
so it is a simple symmetric encryptions. The password printed out can be used
as \f(CW\*(C`Password\*(C'\fR value for \s-1HTTP\s0 authentication and \s-1HTTP\s0 proxy authentication in
configuration files or at the command line.
.SH "HISTORY TRACKING"
.IX Header "HISTORY TRACKING"
The agent knows about a history mode, which can remember a certain
amount return values from previous requests. This mode can be switched on/off
on a per attribute (+ inner path) and operation basis. By default it is
switched off completely. You can switch in on by executing the
\&\f(CW\*(C`JMX4PERL_HISTORY_MAX_ATTRIBUTE\*(C'\fR and \f(CW\*(C`JMX4PERL_HISTORY_MAX_OPERATION\*(C'\fR
operation with \*(L"exec\*(R" commands. This is best explained by some example:
.PP
.Vb 1
\& jmx4perl exec JMX4PERL_HISTORY_MAX_ATTRIBUTE java.lang:type=Memory HeapMemoryUsage used 10 <agent\-url>
.Ve
.PP
This switches on tracking of this particular attribute. I.e. each time a
\&\f(CW\*(C`read\*(C'\fR request is performed, the value is remembered along with a timestamp on
the server side. At maximum 10 entries are kept, the oldest entries get shifted
out after the eleventh read. Setting the value to \f(CW0\fR will remove the history
completely. You can't set the limit beyond a certain hard limit, which can be
found as attribute under the alias
\&\f(CW\*(C`JMX4PERL_HISTORY_MAX_ENTRIES\*(C'\fR. Unfortunately, one can not use an alias yet
for the arguments of \f(CW\*(C`JMX4PERL_HISTORY_MAX_ATTRIBUTE\*(C'\fR. Also note, if you don't
has an inner path, you need to use a \f(CW\*(C`[null]\*(C'\fR as the argument before the max
entry number.
.PP
For completely resetting the history, use
.PP
.Vb 1
\& jmx4perl exec JMX4PERL_HISTORY_RESET <agent\-url>
.Ve
.PP
If you are curious about the size of the history for all entries, use
.PP
.Vb 1
\& jmx4perl read JMX4PERL_HISTORY_SIZE <agent\-url>
.Ve
.PP
This will print out the history size in bytes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
JMX::Jmx4Perl \- Entry point for programmatic \s-1JMX\s0 access which is used by
this tool.
.PP
check_jmx4perl \- a production ready Nagios check using JMX::Jmx4Perl
.PP
jolokia \- utility for downloading and managing Jolokia agents
.PP
j4psh \- readline based \s-1JMX\s0 shell with context sensitive command line
completion.
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of jmx4perl.
.PP
Jmx4perl is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.
.PP
jmx4perl is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with jmx4perl.  If not, see <http://www.gnu.org/licenses/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
roland@cpan.org

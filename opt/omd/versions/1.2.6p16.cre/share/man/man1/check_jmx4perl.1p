.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CHECK_JMX4PERL 1p"
.TH CHECK_JMX4PERL 1p "2016-01-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
check_jmx4perl \- Nagios plugin using jmx4perl for accessing JMX data remotely
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& # Check for used heap memory (absolute values)
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-name memory_used \e
\&                \-\-mbean java.lang:type=Memory \e
\&                \-\-attribute HeapMemoryUsage \e 
\&                \-\-path used \e
\&                \-\-critical 10000000 \e
\&                \-\-warning   5000000 
\&
\& # Check that used heap memory is less than 80% of the available memory
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-alias MEMORY_HEAP_USED \e
\&                \-\-base MEMORY_HEAP_MAX \e 
\&                \-\-critical :80
\&
\& # Use predefined checks in a configuration file with a server alias
\& # Server alias is \*(Aqwebshop\*(Aq, check is about requests per minute for the 
\& # servlet \*(Aqsocks_shop\*(Aq
\& check_jmx4perl \-\-config /etc/nagios/check_jmx4perl/tomcat.cfg
\&                \-\-server webshop \e
\&                \-\-check tc_servlet_requests \e
\&                \-\-critical 1000 \e
\&                socks_shop
\& 
\& # Check for string values by comparing them literally
\& check_jmx4perl \-\-url http://localhost::8888/jolokia \e
\&                \-\-mbean myDomain:name=myMBean \e
\&                \-\-attribute stringAttribute \e
\&                \-\-string \e
\&                \-\-critical \*(AqStopped\*(Aq \e
\&                \-\-warning \*(Aq!Started\*(Aq
\&
\&
\& # Check that no more than 5 threads are started in a minute
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-alias THREAD_COUNT_STARTED \e
\&                \-\-delta 60 \e
\&                \-\-critical 5
\&
\& # Execute a JMX operation on an MBean and use the return value for threshold
\& # Here a thread\-deadlock is detected.
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-mbean java.lang:type=Threading \e
\&                \-\-operation findDeadlockedThreads \e
\&                \-\-null no\-deadlock \e
\&                \-\-string \e
\&                \-\-critical \*(Aq!no\-deadlock\*(Aq \e
\&                \-\-critical 10
\&
\& # Use check_jmx4perl in proxy mode
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-alias MEMORY_HEAP_USED \e
\&                \-\-critical 10000000 \e
\&                 \-\-target service:jmx:rmi:///jndi/rmi://bhut:9999/jmxrmi
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`check_jmx4perl\*(C'\fR is a Nagios plugin for monitoring Java applications. It uses
an agent based approach for accessing \s-1JMX\s0 exposed information remotely.
.PP
Before start using \f(CW\*(C`check_jmx4perl\*(C'\fR an agent must be installed on the target
platform. For \s-1JEE\s0 application server this is a simple webapplication packaged
as a \f(CW\*(C`war\*(C'\fR archive. For other platforms, other agents are available,
too. Please refer to the \f(CW\*(C`README\*(C'\fR for installation instructions and the
supported platforms.
.PP
\&\f(CW\*(C`check_jmx4perl\*(C'\fRs can also be used in an agentless mode (i.e. no agent needs
to be installed on the target platform). See \*(L"Proxy mode\*(R" for details.
.PP
This plugin can be configured in two ways: Either, all required parameters for
identifying the \s-1JMX\s0 information can be given via the command line. Or, a
configuration file can be used to define one or more Nagios checks. This is the
recommended way, since it allows for more advanced features not available when
using the command line alone. Each command line argument has an equivalent
option in the configuration files, though.
.PP
This documentation contains four parts. First, a tutorial gives
a 5 minute quickstart for installing and using \f(CW\*(C`check_jmx4perl\*(C'\fR. The middle
part offers some technical background information on \s-1JMX\s0 itself, the
features provided by this plugin and finally the command line
arguments and the configuration file
directives are described.
.SH "TUTORIAL"
.IX Header "TUTORIAL"
Before we dive into the more nifty details, this 5 minutes quickstart gives
a simple cooking recipe for configuration and setup of \f(CW\*(C`check_jmx4perl\*(C'\fR.
.IP "\(bu" 4
This tutorial uses \fItomcat\fR as an application server. Download it from
<http://tomcat.apache.org> (either version 5 or 6) and extract it:
.Sp
.Vb 3
\&  $ tar zxvf apache\-tomcat\-*.tar.gz
\&  $ # We need this variable later on:
\&  $ TC=\`pwd\`/apache\-tomcat*
.Ve
.IP "\(bu" 4
Download \fIjmx4perl\fR from <http://search.cpan.org/~roland/jmx4perl> and install
it:
.Sp
.Vb 6
\&  $ tar zxvf jmx4perl\-*.tar.gz
\&  $ cd jmx4perl*
\&  $ # Store current directory for later reference:
\&  $ J4P=\`pwd\`      
\&  $ perl Build.PL
\&  $ sudo ./Build install
.Ve
.Sp
This is installs the Perl modules around \f(CW\*(C`JMX::Jmx4Perl\*(C'\fR which can be used for
programmatic \s-1JMX\s0 access. There are some \s-1CPAN\s0 dependencies for jmx4perl, the
build will fail if there are missing modules. Please install the missing
modules via cpan (\f(CW\*(C`cpan \f(CImodule\f(CW\*(C'\fR). The Nagios plugin \f(CW\*(C`check_jmx4perl\*(C'\fR is
installed in a standard location (\fI/usr/bin\fR, \fI/usr/local/bin\fR or whatever
your Perl installation thinks is appropriate) as well as the other scripts
\&\f(CW\*(C`jmx4perl\*(C'\fR (a generic tool for accessing \s-1JMX\s0) and \f(CW\*(C`j4psh\*(C'\fR (an interactive \s-1JMX\s0
shell).
.IP "\(bu" 4
Deploy the Jolokia agent in Tomcat:
.Sp
.Vb 2
\&  $ cd $TC/webapps
\&  $ jolokia
.Ve
.IP "\(bu" 4
Start Tomcat:
.Sp
.Vb 1
\&  $ $TC/bin/startup.sh
.Ve
.IP "\(bu" 4
Check your setup:
.Sp
.Vb 1
\&  $ jmx4perl http://localhost:8080/jolokia
.Ve
.Sp
This prints out a summary about your application
server. <http://localhost:8080/jolokia> is the \s-1URL\s0 under which the agent is
reachable. Tomcat itself listens on port 8080 by default, and any autodeployed
war archive can be reached under its filename without the .war suffix (jolokia in
this case).
.IP "\(bu" 4
Try a first Nagios check for checking the amount of available heap memory in
relation to the maximal available heap:
.Sp
.Vb 7
\&  $ check_jmx4perl \-\-url http://localhost:8080/jolokia  \e
\&                   \-\-mbean java.lang:type=Memory    \e
\&                   \-\-attribute HeapMemoryUsage      \e
\&                   \-\-path used                      \e
\&                   \-\-base java.lang:type=Memory/HeapMemoryUsage/max \e
\&                   \-\-warning 80                     \e
\&                   \-\-critical 90        
\&
\&  OK \- [java.lang:type=Memory,HeapMemoryUsage,used] : In range 9.83% (12778136 / 129957888) | 
\&      \*(Aq[java.lang:type#Memory,HeapMemoryUsage,used]\*(Aq=12778136;103966310.4;116962099.2;0;129957888
.Ve
.Sp
where
.RS 4
.IP "\-\-url http://localhost:8080/jolokia" 4
.IX Item "--url http://localhost:8080/jolokia"
is the agent \s-1URL\s0
.IP "\-\-mbean java.lang:type=Memory" 4
.IX Item "--mbean java.lang:type=Memory"
is the MBean name
.IP "\-\-attribute HeapMemoryUsage" 4
.IX Item "--attribute HeapMemoryUsage"
is the attribute to monitor
.IP "\-\-path used" 4
.IX Item "--path used"
is an inner path (see \*(L"Paths\*(R"), which specifies an inner value within a
more complex structure. The value \f(CW\*(C`HeapMemoryUsage\*(C'\fR is a composed value (Jav
type: CompositeData) which combines multiple memory related data. The complete
value can be viewed with \fIjmx4perl\fR:
.Sp
.Vb 7
\&   $ jmx4perl http://localhost:8080/jolokia read java.lang:type=Memory HeapMemoryUsage
\&   {
\&     committed => 85000192,
\&     init => 0
\&     max => 129957888,
\&     used => 15106608,
\&   }
.Ve
.IP "\-\-base java.lang:type=Memory/HeapMemoryUsage/max" 4
.IX Item "--base java.lang:type=Memory/HeapMemoryUsage/max"
is the base value for which a relative threshold should be applied. This is a
shortcut notation in the format \fImbean\fR\f(CW\*(C`/\*(C'\fR\fIattribute\fR\f(CW\*(C`/\*(C'\fR\fIpath\fR.
.IP "\-\-warning 80" 4
.IX Item "--warning 80"
is the warning threshold in percent. I.e. a \f(CW\*(C`WARNING\*(C'\fR will be raised by this
plugin when the heap memory usage is larger than 80% of the maximal available
heap memory for the application server (which is \fIsmaller\fR than the available
memory of the operating system)
.IP "\-\-critical 90" 4
.IX Item "--critical 90"
is the critical threshold in percent. If the available heap memory reaches 90%
of the available heap, a \f(CW\*(C`CRITICAL\*(C'\fR alert will be returned.
.RE
.RS 4
.Sp
All available command line options are described in \*(L"\s-1COMMAND LINE\*(R"\s0.
.RE
.IP "\(bu" 4
For more complex checks the usage of a configuration file is recommended. This
also allows you to keep your Nagios service definitions small and tidy. E.g. for
monitoring the number of request per minute for a certain web application, a
predefined check is available:
.Sp
.Vb 5
\& $ check_jmx4perl \-\-url http://localhost:8080/jolokia \e
\&                  \-\-config $J4P/config/tomcat.cfg \e
\&                  \-\-critical 100 \e
\&                  \-\-check tc_servlet_requests \e
\&                  jolokia\-agent
\& 
\& OK \- 15.00 requests/minute | \*(AqRequests jolokia\-agent\*(Aq=15;5000;100
.Ve
.Sp
where
.RS 4
.ie n .IP "\-\-config $J4P/config/tomcat.cfg" 4
.el .IP "\-\-config \f(CW$J4P\fR/config/tomcat.cfg" 4
.IX Item "--config $J4P/config/tomcat.cfg"
is the path to configuration file. There a several predefined checks coming
with this distribution, which are documented inline. Look there for some
inspiration for what to check.
.IP "\-\-critical 100" 4
.IX Item "--critical 100"
A threshold von 100, i.e. the checked value must be 100 or less, otherwise a
critical alert is raised.
.IP "\-\-check tc_servlet_requests" 4
.IX Item "--check tc_servlet_requests"
is the name of the check to perform which must be defined in the configuration
file
.IP "jolokia-agent" 4
.IX Item "jolokia-agent"
is an extra argument used by the predefined check. It is the name of the
servlet for which the number of requests should be monitored. To get the name
of all registered servlets use \f(CW\*(C`jmx4perl list\*(C'\fR:
.Sp
.Vb 1
\&  $ jmx4perl http://localhost:8080/jolokia list | grep j2eeType=Servlet
.Ve
.Sp
The servlet name is the value of the \f(CW\*(C`name\*(C'\fR property of the listed MBeans.
.RE
.RS 4
.Sp
Configuration files are very powerful and are the recommended way for
configuring \f(CW\*(C`check_jmx4perl\*(C'\fR for any larger installation. Features like multi
checks are even only available when using a configuration file. The syntax for
configuration files are explained in depth in \*(L"\s-1CONFIGURATION\*(R"\s0.
.RE
.IP "\(bu" 4
Finally, a Nagios service definition needs to be added. For the memory example
above, a command for relative checks can be defined:
.Sp
.Vb 10
\&  define command {
\&     command_name         check_jmx4perl_relative
\&     command_line         $USER3$/check_jmx4perl \e
\&                              \-\-url $ARG1$ \e
\&                              \-\-mbean $ARG2$ \e
\&                              \-\-attribute $ARG3$ \e
\&                              \-\-path $ARG4$ \e
\&                              \-\-base $ARG5$ \e
\&                              $ARG6$
\&  }
.Ve
.Sp
Put this into place where you normally define commands (either in the global
Nagios \fIcommands.cfg\fR or in a specific commands configuration file in the
commands directory). \f(CW$USER3\fR is a custom variable and should point to the
directory where \f(CW\*(C`check_jmx4perl\*(C'\fR is installed (e.g. \fI/usr/local/bin\fR).
.Sp
The service definition itself then looks like:
.Sp
.Vb 11
\&  define service {
\&     service_description    j4p_localhost_memory
\&     host_name              localhost
\&     check_command          check_jmx4perl_relative \e
\&                            !http://localhost:8080/jolokia \e
\&                            !java.lang:type=Memory \e
\&                            !HeapMemoryUsage \e
\&                            !used \e
\&                            !java.lang:type=Memory/HeapMemoryUsage/max \e
\&                            !\-\-warning 80 \-\-critical 90
\&  }
.Ve
.Sp
Add this section to your service definitions (depending on your Nagios
installation). This example adds a service to host \f(CW\*(C`localhost\*(C'\fR for checking the
heap memory, raising a \f(CW\*(C`WARNING\*(C'\fR if 80% of the available heap is used and a
\&\f(CW\*(C`CRITICAL\*(C'\fR if more than 90% of the heap memory is occupied.
.PP
Installing and using jmx4perl is really that easy. The Nagios configuration in
this example is rather simplistic, of course a more flexible Nagios setup is
possible. The blog post
<http://labs.consol.de//blog/jmx4perl/check_jmx4perl\-einfache\-servicedefinitionen/>
(written by Gerhard Lausser) shows some advanced configuration setup. (It is in
german, but the automatic translation from <http://bit.ly/bgReAs> seems to be
quite usable).
.SH "REFERENCE"
.IX Header "REFERENCE"
This section explains the \s-1JMX\s0 basics necessary to better understand the usage
of \f(CW\*(C`check_jmx4perl\*(C'\fR. It tries to be as brief as possible, but some theory is
required to get the link to the Java world.
.SS "MBeans"
.IX Subsection "MBeans"
\&\s-1JMX\s0's central entity is an \f(CW\*(C`MBean\*(C'\fR. An MBean exposes management information in
a well defined way. Each MBean has a unique name called \fIObject Name\fR with the
following structure:
.PP
.Vb 1
\&  domain:attribute1=value1,attribute2=value2, .....
.Ve
.PP
E.g.
.PP
.Vb 1
\&  java.lang:type=Memory
.Ve
.PP
points to the MBean which lets you access the memory information of the target
server.
.PP
Unfortunately, except for so called \fIMXBeans\fR
(<http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/package\-summary.html>)
there is no standard naming for MBeans. Each platform uses its own. There used
to be a naming standard defined in \fB\s-1JSR77\s0\fR
(<http://jcp.org/en/jsr/detail?id=77>), unfortunately it was never widely
adopted.
.PP
There are various ways for identifying MBeans on a server:
.IP "\(bu" 4
Use \f(CW\*(C`jmx4perl \-\-list\*(C'\fR to list all registered MBeans. In addition \f(CW\*(C`jmx4perl
\&\-\-attributes\*(C'\fR dumps out all known MBean attributes along with their values. 
(Be careful, the output can be quite large)
.IP "\(bu" 4
Use \f(CW\*(C`j4psh\*(C'\fR for interactively exploring the \s-1JMX\s0 namespace.
.IP "\(bu" 4
Use an alias. An alias is a shortcut for an MBean name, predefined by
JMX::Jmx4Perl. All known aliases can be shown with \f(CW\*(C`jmx4perl aliases\*(C'\fR.
Since each platform can have slightly different MBean names for the same
information, this extra level of indirection might help in identifying
MBeans. See \*(L"Aliases\*(R" for more about aliases.
.IP "\(bu" 4
Use a predefined check. \f(CW\*(C`check_jmx4perl\*(C'\fR comes with quite some checks
predefined in various configuration files. These are ready for use out of the
box. \*(L"Predefined checks\*(R" are described in an extra section.
.IP "\(bu" 4
Ask your Java application development team for application specific MBean names.
.SS "Attributes and Operations"
.IX Subsection "Attributes and Operations"
\&\f(CW\*(C`check_jmx4perl\*(C'\fR can obtain the information to monitor from two sources:
Either as MBean \fIattributes\fR or as a return value from \s-1JMX \s0\fIoperations\fR.
Since \s-1JMX\s0 values can be any Java object, it is important to understand, how
\&\f(CW\*(C`check_jmx4perl\*(C'\fR (or \fIjmx4perl\fR in general) handles this situation.
.PP
Simple data types can be used directly in threshold checking. I.e. the
following data types can be used directly
.IP "\(bu" 4
Integer
.IP "\(bu" 4
Long
.IP "\(bu" 4
Float
.IP "\(bu" 4
Double
.IP "\(bu" 4
Boolean
.IP "\(bu" 4
String
.PP
\&\f(CW\*(C`String\*(C'\fR and \f(CW\*(C`Boolean\*(C'\fR can be used in \fIstring\fR checks only, whereas the others
can be used in both, \fInumeric\fR and \fIstring\fR checks (see \*(L"String checks\*(R").
.PP
For numeric checks, the threhsholds has to be specified according to the format
defined in
<http://nagiosplug.sourceforge.net/developer\-guidelines.html#THRESHOLDFORMAT>
.PP
\fIPaths\fR
.IX Subsection "Paths"
.PP
For more complex types, \f(CW\*(C`check_jmx4perl\*(C'\fR provides the concept of so called
\&\fIpaths\fR for specifying an inner attribute of a more complex value. A path
contains parts separated by slashes (/). It is similar to an XPath expression
for accessing parts of an \s-1XML\s0 document. Each part points to an inner level of
a complex object.
.PP
For example, the MBean \f(CW\*(C`java.lang:type=Memory\*(C'\fR exposes an attribute called
\&\f(CW\*(C`HeapMemoryUsage\*(C'\fR. This attribute is a compound data type which contains
multiple entries. Looking with \f(CW\*(C`jmx4perl\*(C'\fR at this attribute
.PP
.Vb 7
\& $ jmx4perl http://localhost:8080/jolokia read java.lang:type=Memory HeapMemoryUsage
\& {
\&   committed => 85000192,
\&   init => 0
\&   max => 129957888,
\&   used => 15106608,
\& }
.Ve
.PP
it can be seen, that there are 4 values coming with the reponse. With a path
\&\f(CW\*(C`used\*(C'\fR one can directly pick the used heap memory usage (8135440 bytes in this
case) which then can be used for a threshold check.
.PP
.Vb 6
\& $ check_jmx4perl \-\-url http://localhost:8080/jolokia \e 
\&                  \-\-mbean java.lang:type=Memory \e 
\&                  \-\-attribute HeapMemoryUsage \e
\&                  \-\-path used \e
\&                  \-\-critical 100000000
\& OK \- [java.lang:type=Memory,HeapMemoryUsage,used] : Value 10136056 in range | ...
.Ve
.PP
\fIAttributes\fR
.IX Subsection "Attributes"
.PP
Attributes are values obtained from MBean properties.  Complex values are
translated into a \s-1JSON\s0 structure on the agent side, which works for most
types. To access a single value from a complex value, the path mechanism
described above can be used. Thresholds can be applied to simple data types
only, so for complex attributes a path is \fIrequired\fR.
.PP
\fIOperations\fR
.IX Subsection "Operations"
.PP
The return values of operations can be used for threshold checking, too. Since
a \s-1JMX\s0 exposed operation can take arguments, these has to be provided as extra
arguments on the command line or in the configuration via the \f(CW\*(C`Args\*(C'\fR configuration 
directive. Due to the agent's nature and the protocol used (\s-1JSON\s0), only simple typed 
arguments like strings, numbers or booleans (\*(L"true\*(R"/\*(L"false\*(R") can be used.
.PP
Example:
.PP
.Vb 7
\& $ check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                  \-\-mbean jolokia:type=Runtime \e
\&                  \-\-operation getNrQueriesFor \e
\&                  \-\-critical 10 \e
\&                  "operation" \e
\&                  "java.lang:type=Memory" \e
\&                  "gc"
.Ve
.PP
This example contacts a MBean \f(CW\*(C`jolokia:type=Runtime\*(C'\fR registered by the jolokia
agent in order to check for the number of queries for a certain MBean via this
agent. For this purpose an \s-1JMX\s0 operation \f(CW\*(C`getNrQueriesFor\*(C'\fR is exposed which
takes three arguments: The type (\*(L"operation\*(R"/\*(L"attribute\*(R"), the MBean's
ObjectName and the operation/attribute name which was called.
.PP
If the operation to be called is an \fIoverloaded operation\fR (i.e. an operation
whose name exists multiple times on the same MBean but with different parameter
types), the argument types must be given within parentheses:
.PP
.Vb 1
\&     \-\-operation checkUserCount(java.lang.String,java.lang.String)
.Ve
.SS "Aliases"
.IX Subsection "Aliases"
Aliases are shortcut for common MBean names and attributes. E.g. the alias
\&\f(CW\*(C`MEMORY_HEAP_MAX\*(C'\fR specifies the MBean \f(CW\*(C`java.lang:type=Memory\*(C'\fR, the attribute
\&\f(CW\*(C`HeapMemoryUsage\*(C'\fR and the path \f(CW\*(C`max\*(C'\fR. Aliases can be specified with the
\&\f(CW\*(C`\-\-alias\*(C'\fR option or with the configuration directive \f(CW\*(C`Alias\*(C'\fR. Aliases can be
translated to different MBean names on different application server. For this
\&\f(CW\*(C`check_jmx4perl\*(C'\fR uses an autodetection mechanism to determine the target
platform. Currently this mechanism uses one or more extra server
round-trips. To avoid this overhead, the \f(CW\*(C`\-\-product\*(C'\fR option (configuration:
\&\f(CW\*(C`Product\*(C'\fR) can be used to specify the target platform explicitely. This is
highly recommended in case you are using the aliasing feature.
.PP
Aliases are not extensible and can not take any parameters. All availables
aliases can be viewed with
.PP
.Vb 1
\&  jmx4perl aliases
.Ve
.PP
A much more flexible alternative to aliases are \fIparameterized checks\fR, which
are defined in a configuration file. See \*(L"\s-1CONFIGURATION\*(R"\s0 for more details
about parameterized checks.
.SS "Relative Checks"
.IX Subsection "Relative Checks"
Relative values are often more interesting than absolute numbers. E.g. the
knowledge that 140 MBytes heap memory is used is not as important as the
knowledge, that 56% of the available memory is used. Relative checks calculate
the ratio of a value to a base value. (Another advantage is that Nagios service
definitions for relative checks are generic as they can be applied for target
servers with different memory footprints).
.PP
The base value has to be given with \f(CW\*(C`\-\-base\*(C'\fR (configuration: \f(CW\*(C`Base\*(C'\fR). The
argument provided here is first tried as an alias name or checked as an
absolute, numeric value. Alternatively, you can use a full MBean/attribute/path
specification by using a \f(CW\*(C`/\*(C'\fR as separator, e.g.
.PP
.Vb 1
\&  ... \-\-base java.lang:type=Memory/HeapMemoryUsage/max ...
.Ve
.PP
If one of these parts (the path is optional) contains a slash within its name,
the slash must be escaped with a backslash (\e/). Backslashes in MBean names are
escaped with a double backslash (\e\e).
.PP
Alternatively \f(CW\*(C`\-\-base\-mbean\*(C'\fR, \f(CW\*(C`\-\-base\-attribute\*(C'\fR and \f(CW\*(C`\-\-base\-path\*(C'\fR can be
used to specify the parts of the base value separately.
.PP
Example:
.PP
.Vb 4
\&   check_jmx4perl \-\-url http://localhost:8080/jolokia \e 
\&                  \-\-value java.lang:type=Memory/HeapMemoryUsage/used \e 
\&                  \-\-base java.lang:type=Memory/HeapMemoryUsage/max \e 
\&                  \-\-critical 90
\&
\&   check_jmx4perl \-\-url http://localhost:8080/jolokia \e 
\&                  \-\-value java.lang:type=Memory/HeapMemoryUsage/used \e 
\&                  \-\-base\-mbean java.lang:type=Memory \e
\&                  \-\-base\-attribute HeapMemoryUsage \e
\&                  \-\-base\-path max \e 
\&                  \-\-critical 90
.Ve
.PP
This check will trigger a state change to \s-1CRITICAL\s0 if the used heap memory will
exceed 90% of the available heap memory.
.SS "Incremental Checks"
.IX Subsection "Incremental Checks"
For some values it is worth monitoring the increase rate (velocity). E.g. for
threads it can be important to know how fast threads are created.
.PP
Incremental checks are switched on with the \f(CW\*(C`\-\-delta\*(C'\fR option (configuration:
\&\f(CW\*(C`Delta\*(C'\fR). This option takes an optional argument which is interpreted as
seconds for normalization.
.PP
Example:
.PP
.Vb 5
\&  check_jmx4perl \-\-url http://localhost:8080/jolokia \e 
\&                 \-\-mbean java.lang:type=Threading \e 
\&                 \-\-attribute TotalStartedThreadCount \e 
\&                 \-\-delta 60 \e 
\&                 \-\-critical 5
.Ve
.PP
This will fail as \s-1CRITICAL\s0 if more than 5 threads are created per minute (60
seconds). Technically \f(CW\*(C`check_jmx4perl\*(C'\fR uses the \fIhistory\fR feature of the jolokia
agent deployed on the target server. This will always store the result and the
timestamp of the last check on the server side and returns these historical
values on the next check so that the velocity can be calculated. If no value is
given for \f(CW\*(C`\-\-delta\*(C'\fR, no normalization is used. In the example above, without a
normalization value of 60, a \s-1CRITICAL\s0 is returned if the number of threads
created increased more than 5 between two checks.
.PP
\&\f(CW\*(C`\-\-delta\*(C'\fR doesn't work yet with \f(CW\*(C`\-\-base\*(C'\fR (e.g. incremental mode for
relative checks is not available).
.SS "String checks"
.IX Subsection "String checks"
In addition to standard numerical checks, direct string comparison can be
used. This mode is switched on either explicitely via \f(CW\*(C`\-\-string\*(C'\fR
(configuration: \f(CW\*(C`String\*(C'\fR) or by default implicitely if a heuristics determines
that a value is non-numeric. Numeric checking can be enforced with the option
\&\f(CW\*(C`\-\-numeric\*(C'\fR (configuration: Numeric).
.PP
For string checks, \f(CW\*(C`\-\-critical\*(C'\fR and \f(CW\*(C`\-\-warning\*(C'\fR are not
treated as numerical values but as string types. They are compared literally
against the value retrieved and yield the corresponding Nagios status if
matched. If the threshold is given with a leading \f(CW\*(C`!\*(C'\fR, the condition is
negated. E.g. a \f(CW\*(C`\-\-critical \*(Aq!Running\*(Aq\*(C'\fR returns \f(CW\*(C`CRITICAL\*(C'\fR if the value
\&\fInot\fR equals to \f(CW\*(C`Running\*(C'\fR. Alternatively you can also use a regular
expression by using \f(CW\*(C`qr/.../\*(C'\fR as threshold value (substitute \f(CW\*(C`...\*(C'\fR with the
pattern to used for comparison). Boolean values are returned as \f(CW\*(C`true\*(C'\fR or
\&\f(CW\*(C`false\*(C'\fR strings from the agent, so you can check for them as well with this
kind of string comparison.
.PP
No performance data will be generated for string checks by default. This
can be switched on by providing \f(CW\*(C`\-\-perfdata on\*(C'\fR (or "\f(CW\*(C`PerfData on\*(C'\fR" in 
the configuration). However, this probably doesn't make much sense, though.
.SS "Output Tuning"
.IX Subsection "Output Tuning"
The output of \f(CW\*(C`check_jmx4perl\*(C'\fR can be highly customized. A unit-of-measurement
can be provided with the option \f(CW\*(C`\-\-unit\*(C'\fR (configuration: \f(CW\*(C`Unit\*(C'\fR) which 
specifies how the the attribute or an operation's return value should be
interpreted. The units available are
.PP
.Vb 5
\&  B  \- Byte
\&  KB \- Kilo Byte
\&  MB \- Mega Byte
\&  GB \- Giga Byte
\&  TB \- Terra Byte
\&  
\&  us \- Microseconds
\&  ms \- Milliseconds
\&  s  \- Seconds
\&  m  \- Minutes
\&  h  \- Hours
\&  d  \- Days
.Ve
.PP
The unit will be used for performance data as well as for the plugin's
output. Large numbers are converted to larger units automatically (and reverse
for small number that are smaller than 1). E.g. \f(CW\*(C`2048 KB\*(C'\fR is converted to \f(CW\*(C`2
MB\*(C'\fR. Beautifying by conversion is \fIonly\fR performed for the plugin
output, \fBnot\fR for the performance data for which no conversions happens at
all.
.PP
Beside unit handling, you can provide your own label for the Nagios output via
\&\f(CW\*(C`\-\-label\*(C'\fR. The provided option is interpreted as a pattern with the following
placeholders:
.PP
.Vb 10
\& %v   the absolute value 
\& %f   the absolute value as floating point number
\& %r   the relative value as percentage (\-\-base)
\& %q   the relative value as ratio of value to base (\-\-base)
\& %u   the value\*(Aqs unit for the output when \-\-unit is used (after shortening)
\& %w   the base value\*(Aqs unit for the output when \-\-unit is used (after shortening)
\& %b   the absolut base value as it is used with \-\-base 
\& %c   the Nagios exit code in the Form "OK", "WARNING", "CRITICAL" 
\&      or "UNKNOWN"
\& %t   Threshold value which failed ("" when the check doesn\*(Aqt fail)
\& %n   name, either calulated automatically or given with \-\-name
\& %d   the delta value used for normalization when using incremental mode
\& %y   WARNING threshold as configured
\& %z   CRITICAL threshold as configured
.Ve
.PP
Note that \f(CW%u\fR and \f(CW%w\fR are typically \fInot\fR the same as the \f(CW\*(C`\-\-unit\*(C'\fR
option. They specify the unit \fIafter\fR the conversion for the plugin output as
described above. You can use the same length modifiers as for \f(CW\*(C`sprintf\*(C'\fR to
fine tune the output.
.PP
Example:
.PP
.Vb 6
\& check_jmx4perl \-\-url http://localhost:8888/jolokia \e
\&                \-\-alias MEMORY_HEAP_USED \e
\&                \-\-base MEMORY_HEAP_MAX \e 
\&                \-\-critical :80 \e
\&                \-\-label "Heap\-Memory: %.2r% used (%.2v %u / %.2b %w)" \e
\&                \-\-unit B
.Ve
.PP
will result in an output like
.PP
.Vb 1
\& OK \- Heap\-Memory: 3.48% used (17.68 MB / 508.06 MB) | \*(Aq[MEMORY_HEAP_USED]\*(Aq=3.48%;;:80
.Ve
.SS "Security"
.IX Subsection "Security"
Since the jolokia-agent is usually a simple war-file, it can be secured as any
other Java Webapplication. Since setting up authentication is \s-1JEE\s0 Server
specific, a detailed instruction is beyond the scope of this document. Please
refer to your appserver documentation, how to do this. At the moment,
\&\f(CW\*(C`check_jmx4perl\*(C'\fR can use Basic-Authentication for authentication purposes
only.
.PP
In addition to this user/password authentication, the jolokia-agent uses a policy
file for fine granular access control. The policy is defined with an \s-1XML\s0 file
packaged within the agent. In order to adapt this to your needs, you need to
extract the war file, edit it, and repackage the agent with a policy file. A
future version of jmx4perl might provide a more flexible way for changing the
policy.
.PP
In detail, the following steps are required:
.IP "\(bu" 4
Download \fIjolokia.war\fR and a sample policy file \fIjolokia\-access.xml\fR into a
temporary directory:
.Sp
.Vb 2
\&   $ jolokia
\&   $ jolokia \-\-policy
.Ve
.IP "\(bu" 4
Edit the policy according to your needs.
.Sp
.Vb 1
\&   $ vi jolokia\-access.xml
.Ve
.IP "\(bu" 4
Repackage the war file
.Sp
.Vb 1
\&   $ jolokia repack \-\-policy jolokia.war
.Ve
.IP "\(bu" 4
Deploy the agent \fIjolokia.war\fR as usual
.PP
The downloaded sample policy file \fIjolokia\-access.xml\fR contains inline
documentation and examples, so you can easily adapt it to your environment.
.PP
Restrictions can be set to on various parameters :
.PP
\fIClient \s-1IP\s0 address\fR
.IX Subsection "Client IP address"
.PP
Access to the jolokia-agent can be restricted based on the client \s-1IP\s0 accessing the
agent. A single host, either with hostname or \s-1IP\s0 address can be set or even a
complete subnet.
.PP
Example:
.PP
.Vb 4
\&  <remote>
\&    <host>127.0.0.1</host>
\&    <host>10.0.0.0/16</host>
\&  </remote>
.Ve
.PP
Only the localhost or any host in the subnet 10.0 is allowed to access the
agent.  If the \f(CW\*(C`<remote>\*(C'\fR section is missing, access from all hosts
is allowed.
.PP
\fICommands\fR
.IX Subsection "Commands"
.PP
The access can be restricted to certain commands.
.PP
Example:
.PP
.Vb 3
\&   <commands>
\&     <command>read</command>
\&   </commands>
.Ve
.PP
This will only allow reading of attributes, but no other operation like
execution of operations. If the \f(CW\*(C`<commands>\*(C'\fR section is missing, any
command is allowed. The commands known are
.IP "read" 4
.IX Item "read"
Read an attribute
.IP "write" 4
.IX Item "write"
Write an attribute (used by \f(CW\*(C`check_jmx4perl\*(C'\fR only when using incremental checks)
.IP "exec" 4
.IX Item "exec"
Execution of an operation
.IP "list" 4
.IX Item "list"
List all MBeans (not used by \f(CW\*(C`check_jmx4perl\*(C'\fR)
.IP "version" 4
.IX Item "version"
Version command (not used by \f(CW\*(C`check_jmx4perl\*(C'\fR)
.IP "search" 4
.IX Item "search"
Search for MBean (not used by \f(CW\*(C`check_jmx4perl\*(C'\fR)
.PP
\fISpecific MBeans\fR
.IX Subsection "Specific MBeans"
.PP
The most specific policy can be put on the MBeans themselves. For this, two
sections can be defined, depending on whether a command is globaly enabled or
denied.
.IP "<allow>" 4
.IX Item "<allow>"
The \f(CW\*(C`<allow>\*(C'\fR section is used to switch on access for operations and
attributes in case \f(CW\*(C`read\*(C'\fR, \f(CW\*(C`write\*(C'\fR or \f(CW\*(C`exec\*(C'\fR are globally disabled (see
above). Wildcards can be used for MBean names and attributes/and operations.
.Sp
Example:
.Sp
.Vb 10
\&  <allow>
\&    <mbean>
\&      <name>jolokia:*</name>
\&      <operation>*</operation>
\&      <attribute>*</attribute>
\&    </mbean>
\&    <mbean>
\&      <name>java.lang:type=Threading</name>
\&      <operation>findDeadlockedThreads</operation>
\&    </mbean>
\&    <mbean>
\&    <name>java.lang:type=Memory</name>
\&      <attribute mode="read">Verbose</attribute>
\&    </mbean>
\&
\&  </allow>
.Ve
.Sp
This will allow access to all operation and attributes of all MBeans in 
the \f(CW\*(C`jolokia:\*(C'\fR domain and to the operation \f(CW\*(C`findDeadlockedThreads\*(C'\fR on the
MBean \f(CW\*(C`java.lang:type=Threading\*(C'\fR regardless whether the \f(CW\*(C`read\*(C'\fR or \f(CW\*(C`exec\*(C'\fR
command is enabled globally. The attribute \f(CW\*(C`Verbose\*(C'\fR on
\&\f(CW\*(C`java.lang:type=Memory\*(C'\fR is allowed to be read, but cannot be written (if the
\&\f(CW\*(C`mode\*(C'\fR attribute is not given, both read and write is allowed by default).
.IP "<deny>" 4
.IX Item "<deny>"
The \f(CW\*(C`<deny>\*(C'\fR section forbids access to certain MBean's operation
and/or attributes, even when the command is allowed globally.
.Sp
Example:
.Sp
.Vb 7
\&  <deny>
\&    <mbean>
\&      <!\-\- Exposes user/password of data source, so we forbid this one \-\->
\&      <name>com.mchange.v2.c3p0:type=PooledDataSource*</name>
\&      <attribute>properties</attribute>
\&    </mbean>
\&  </deny>
.Ve
.Sp
This will forbid the access to the specified attribute, even if \f(CW\*(C`read\*(C'\fR is allowed globally. 
If there is an overlap between <allow> and <deny>, <allow> takes precedence.
.SS "Proxy mode"
.IX Subsection "Proxy mode"
\&\f(CW\*(C`check_jmx4perl\*(C'\fR can be used in an \fIagentless mode\fR as well, i.e. no
jolokia-agent needs to deployed on the target server. The setup for the agentless
mode is a bit more complicated, though:
.IP "\(bu" 4
The target server needs to export its MBeans via \s-1JSR\-160.\s0 The configuration for
\&\s-1JMX\s0 export is different for different \s-1JEE\s0 Server. <http://labs.consol.de> has
some cooking recipes for various servers (JBoss, Weblogic).
.IP "\(bu" 4
A dedicated \fIproxy server\fR needs to be setup on which the \fIjolokia.war\fR
gets deployed. This can be a simple Tomcat or Jetty servlet container. Of
course, an already existing \s-1JEE\s0 Server can be used as proxy server as well.
.IP "\(bu" 4
For using \f(CW\*(C`check_jmx4perl\*(C'\fR the target \s-1JMX URL\s0 for accessing the target server
is required. This \s-1URL\s0 typically looks like
.Sp
.Vb 1
\&  service:jmx:rmi:///jndi/rmi://host:9999/jmxrmi
.Ve
.Sp
but this depends on the server to monitor. Please refer to your \s-1JEE\s0 server's
documentation for how the export \s-1JMX URL\s0 looks like.
.IP "\(bu" 4
\&\f(CW\*(C`check_jmx4perl\*(C'\fR uses the proxy mody if the option \f(CW\*(C`\-\-target\*(C'\fR (configuration:
<Target>) is provided. In this case, this Nagios plugin contacts the proxy
server specified as usual with \f(CW\*(C`\-\-url\*(C'\fR (config: Url in Server section) and put
the \s-1URL\s0 specified with \f(CW\*(C`\-\-target\*(C'\fR in the request. The agent in the proxy then
dispatches this request to the real target and uses the \s-1JMX\s0 procotol specified
with in the target \s-1URL.\s0 The answer received is then translated into a \s-1JSON\s0
response which is returned to \f(CW\*(C`check_jmx4perl\*(C'\fR.
.Sp
Example:
.Sp
.Vb 5
\&   check_jmx4perl \-\-url http://proxy:8080/jolokia \e
\&                  \-\-target service:jmx:rmi:///jndi/rmi://jeeserver:9999/jmxrmi
\&                  \-\-alias MEMORY_HEAP_USED
\&                  \-\-base MEMORY_HEAP_MAX
\&                  \-\-critical 90
.Ve
.Sp
Here the host \fIproxy\fR is listening on port 8080 for jolokia requests and host \fIjeeserver\fR
exports its \s-1JMX\s0 data via \s-1JSR\-160\s0 over port 9999. (\s-1BTW, \s0\fIproxy\fR can be
monitored itself as usual).
.Sp
So, what mode is more appropriate ? Both, the \fIagent mode\fR and the
\&\fIproxy mode\fR have advantages and disadvantages.
.PP
\fIAdvantages\fR
.IX Subsection "Advantages"
.IP "\(bu" 4
No agent needs to be installed on the target server. This might be useful for
policy reasons.
.IP "\(bu" 4
Compared to other Nagios \s-1JMX\s0 plugin's no \s-1JVM\s0 startup is required since the
proxy server is already running.
.PP
\fIDisadvantages\fR
.IX Subsection "Disadvantages"
.IP "\(bu" 4
It takes two hops to get to the target server
.IP "\(bu" 4
Exporting \s-1JMX\s0 via \s-1JSR\-160\s0 is often not that easy as it may seem. (See post
series on remote \s-1JMX\s0 on labs.consol.de)
.IP "\(bu" 4
Some features like merging of MBean Servers are not available in proxy mode. (i.e
you need to know in advance which MBean-Server on the target you want to
contact for a certain MBean, since this information is part of the \s-1JMX URL\s0)
.IP "\(bu" 4
Bulk request needs to be detangled into multiple \s-1JMX\s0 request since \s-1JSR\-160\s0
doesn't know anything about bulk requests.
.IP "\(bu" 4
jmx4perl's fine granular security policy is not available, since \s-1JSR\-160 JMX\s0 is
an all-or-nothing thing. (except you are willing to dive deep into Java
Security stuff)
.IP "\(bu" 4
For \s-1JSR\-160\s0 objects to be transferable to the proxy, the proxy needs to know
about the Java types and those types must be serializable. If this is not the
case, the proxy isn't able to collect the information from the target. So only
a subset of MBeans can be monitored this way.
.Sp
The agent protocol is more flexible since it translates the data into a \s-1JSON\s0
structure \fIbefore\fR putting it on the wire.
.PP
To summarize, I would always recommend the \fIagent mode\fR over the \fIproxy mode\fR
except when an agentless operation is required (e.g. for policy reasons).
.SH "COMMAND LINE"
.IX Header "COMMAND LINE"
The pure command line interface (without a configuration file) is mostly suited
for simple checks where the predefined defaults are suitable. For all other use
cases, a configuration file fits better.
.PP
\&\f(CW\*(C`check_jmx4perl\*(C'\fR knows about the following command line options:
.IP "\-\-url (\-u)" 4
.IX Item "--url (-u)"
The \s-1URL\s0 for accessing the target server (or the jolokia-proxy server, see \*(L"Proxy Mode\*(R" 
for details about the \s-1JMX\s0 proxy mode)
.Sp
Example:
.Sp
.Vb 1
\&  \-\-url http://localhost:8080/jolokia
.Ve
.IP "\-\-mbean (\-m)" 4
.IX Item "--mbean (-m)"
Object name of MBean to access
.Sp
Example:
.Sp
.Vb 1
\&  \-\-mbean java.lang:type=Runtime
.Ve
.IP "\-\-attribute (\-a)" 4
.IX Item "--attribute (-a)"
A MBean's attribute name. The value of this attribute is used for threshold
checking.
.Sp
Example:
.Sp
.Vb 1
\&  \-\-attribute Uptime
.Ve
.IP "\-\-operation (\-o)" 4
.IX Item "--operation (-o)"
A MBean's operation name. The operation gets executed on the server side and
the return value is used for threshold checking. Any arguments required for
this operation has to be given as additional arguments to
\&\f(CW\*(C`check_jmx4perl\*(C'\fR. See \*(L"Attributes and Operations\*(R" for details.
.Sp
Example:
.Sp
.Vb 2
\&  check_jmx4perl ... \-\-mbean java.lang:type=Threading \e
\&                     \-\-operation getThreadUserTime 1
.Ve
.Sp
Operation \f(CW\*(C`getThreadUserTime\*(C'\fR takes a single argument the thread id (a long)
which is given as extra argument.
.IP "\-\-path (\-p)" 4
.IX Item "--path (-p)"
Path for extracting an inner element from an attribute or operation return
value. See \*(L"Paths\*(R" for details about paths.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-path used
.Ve
.IP "\-\-value" 4
.IX Item "--value"
Shortcut for giving \f(CW\*(C`\-\-mbean\*(C'\fR, \f(CW\*(C`\-\-attribute\*(C'\fR and \f(CW\*(C`\-\-path\*(C'\fR at once.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-value java.lang:type=Memory/HeapMemoryUsage/used
.Ve
.Sp
Any slash (/) in the MBean name must be escaped with a backslash
(\e/). Backslashes in names has to be escaped as \e\e.
.IP "\-\-base (\-b)" 4
.IX Item "--base (-b)"
Switches on relative checking. The value given points to an attribute which
should be used as base value and has to be given in the shortcut notation
described above. Alternatively, the value can be an absolute number or an alias
name (\*(L"Aliases\*(R") The threshold are the interpreted as relative values in
the range [0,100]. See \*(L"Relative Checks\*(R" for details.
.Sp
Example:
.Sp
.Vb 3
\&  \-\-base 100000
\&  \-\-base java.lang:type=Memory/HeapMemoryUsage/max
\&  \-\-base MEMORY_HEAP_MAX
.Ve
.IP "\-\-delta (\-d)" 4
.IX Item "--delta (-d)"
Switches on incremental checking, i.e. the increase rate (or velocity) of an
attribute or operation return value is measured. The value given here is used
for normalization (in seconds). E.g. \f(CW\*(C`\-\-delta 60\*(C'\fR normalizes the velocity to
\&'growth per minute'. See \*(L"Incremental Checks\*(R" for details.
.IP "\-\-string" 4
.IX Item "--string"
Forces string checking, in which case the threshold values are compared as
strings against the measured values. See \*(L"String checks\*(R" for more
details. By default, a heuristic based on the measured value is applied to
determine, whether numerical or string checking should be use
.Sp
Example:
.Sp
.Vb 1
\&  \-\-string \-\-critical \*(Aq!Running\*(Aq
.Ve
.IP "\-\-numeric" 4
.IX Item "--numeric"
Forces numeric checking, in which case the measured valued are compared against
the given thresholds according to the Nagios developer guideline specification
(<http://nagiosplug.sourceforge.net/developer\-guidelines.html#THRESHOLDFORMAT>)
.Sp
Example:
.Sp
.Vb 1
\&  \-\-numeric \-\-critical ~:80
.Ve
.IP "\-\-null" 4
.IX Item "--null"
The value to be used in case the attribute or the operation's return value is
\&\f(CW\*(C`null\*(C'\fR. This is useful when doing string checks. By default, this value is
"\f(CW\*(C`null\*(C'\fR".
.Sp
Example:
.Sp
.Vb 1
\&  \-\-null "no deadlock" \-\-string \-\-critical "!no deadlock"
.Ve
.IP "\-\-name (\-n)" 4
.IX Item "--name (-n)"
Name to be used for the performance data. By default a name is calculated based
on the MBean's name and the attribute/operation to monitor.
.Sp
Example:
.Sp
.Vb 1
\&  \-\-name "HeapMemoryUsage"
.Ve
.IP "\-\-label (\-l)" 4
.IX Item "--label (-l)"
Label for using in the plugin output which can be a format specifier as
described in \*(L"Output Tuning\*(R".
.Sp
Example:
.Sp
.Vb 1
\&  \-\-label "%.2r% used (%.2v %u / %.2b %w)"
.Ve
.IP "\-\-perfdata" 4
.IX Item "--perfdata"
Switch off (\*(L"off\*(R") or on (\*(L"on\*(R") performance data generation. Performance data
is generated by default for numerical checks and omitted for string based
checks. For relative checks, if the value is '%' then performance data is 
appended as relative values instead of absolute values.
.IP "\-\-unit" 4
.IX Item "--unit"
Natural unit of the value measured. E.g. when measuring memory, then the memory
MXBean exports this number as bytes. The value given here is used for
shortening the value's output by converting to the largest possible unit. See
\&\*(L"Output Tuning\*(R" for details.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-alias MEMORY_HEAP_USED \-\-unit B
.Ve
.IP "\-\-critical (\-c)" 4
.IX Item "--critical (-c)"
Critical threshold. For string checks, see \*(L"String checks\*(R" for how the
critical value is interpreted. For other checks, the value given here should
conform to the specification defined in
<http://nagiosplug.sourceforge.net/developer\-guidelines.html#THRESHOLDFORMAT>.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-critical :90
.Ve
.IP "\-\-warning (\-w)" 4
.IX Item "--warning (-w)"
Warning threshold, which is interpreted the same way as the \f(CW\*(C`\-\-critical\*(C'\fR
threshold (see above). At least a warning or critical threshold must be given.
.IP "\-\-alias" 4
.IX Item "--alias"
An alias is a shortcut for an MBean attribute or operation. See \*(L"Aliases\*(R"
for details.
.Sp
Example:
.Sp
.Vb 1
\&  \-\-alias RUNTIME_UPTIME
.Ve
.IP "\-\-product" 4
.IX Item "--product"
When aliasing is used, \f(CW\*(C`check_jmx4perl\*(C'\fR needs to known about the target server
type for resolving the alias. By default it used an autodetection facility,
which at least required an additional request. To avoid this, the product can
be explicitely specified here
.Sp
Example:
.Sp
.Vb 1
\&   \-\-product jboss
.Ve
.IP "\-\-user, \-\-password" 4
.IX Item "--user, --password"
User and password needed when the agent is secured with Basic
Authentication. By default, no authentication is used.
.IP "\-\-timeout (\-t)" 4
.IX Item "--timeout (-t)"
How long to wait for an answer from the agent at most (in seconds). By default,
the timeout is 180s.
.IP "\-\-method" 4
.IX Item "--method"
The \s-1HTTP\s0 metod to use for sending the jmx4perl request. This can be either
\&\f(CW\*(C`get\*(C'\fR or \f(CW\*(C`post\*(C'\fR. By default, an method is determined automatically. \f(CW\*(C`get\*(C'\fR
for simple, single requests, \f(CW\*(C`post\*(C'\fR for bulk request or requests using a \s-1JMX\s0
proxy.
.IP "\-\-proxy" 4
.IX Item "--proxy"
A \s-1HTTP\s0 proxy server to use for accessing the jolokia-agent.
.Sp
Example:
.Sp
.Vb 1
\&  \-\-proxy http://proxyhost:8001/
.Ve
.IP "\-\-legacy\-escape" 4
.IX Item "--legacy-escape"
When the deployed Jolokia agent's version is less than 1.0, then this option
should be used since the escape scheme as changed since version 1.0. This
option is only important for MBeans whose names contain slashes. It is
recommended to upgrade the agent to a post 1.0 version, though.
.IP "\-\-target, \-\-target\-user, \-\-target\-password" 4
.IX Item "--target, --target-user, --target-password"
Switches on jolokia-proxy mode and specifies the \s-1URL\s0 for accessing the target
platform. Optionally, user and password for accessing the target can be given,
too. See \*(L"Proxy Mode\*(R" for details.
.Sp
Example:
.Sp
.Vb 1
\&  \-\-target service:jmx:rmi:///jndi/rmi://bhut:9999/jmxrmi
.Ve
.IP "\-\-config" 4
.IX Item "--config"
Specifies a configuration file from where server and check definitions can be
obtained. See \*(L"\s-1CONFIGURATION\*(R"\s0 for details about the configuration file's
format.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-config /etc/jmx4perl/tomcat.cfg
.Ve
.IP "\-\-server" 4
.IX Item "--server"
Specify a symbolic name for a server connection. This name is used to lookup a
server in the configuration file specified with \f(CW\*(C`\-\-config\*(C'\fR
.Sp
Example:
.Sp
.Vb 6
\& servers.cfg:
\&   <Server tomcat>
\&      Url http://localhost:8080/jolokia
\&      User roland
\&      Password fcn
\&   </Server>
\&
\&   \-\-config /etc/jmx4perl/servers.cfg \-\-server tomcat
.Ve
.Sp
See \*(L"\s-1CONFIGURATION\*(R"\s0 for more about server definitions.
.IP "\-\-check" 4
.IX Item "--check"
The name of the check to use as defined in the configuration file. See
\&\*(L"\s-1CONFIGURATION\*(R"\s0 about the syntax for defining checks and multi checks.
Additional arguments for parameterized checks should be given as additional
arguments on the command line. Please note, that checks specified with
\&\f(CW\*(C`\-\-check\*(C'\fR have precedence before checks defined explicitely on the command
line.
.Sp
Example:
.Sp
.Vb 1
\&   \-\-config /etc/jmx4perl/tomcat.cfg \-\-check tc_servlet_requests jolokia\-agent
.Ve
.IP "\-\-version" 4
.IX Item "--version"
Prints out the version of this plugin
.IP "\-\-verbose (\-v)" 4
.IX Item "--verbose (-v)"
Enables verbose output during the check, which is useful for debugging. Don't
use it in production, it will confuse Nagios.
.IP "\-\-doc, \-\-help (\-h), \-\-usage (\-?)" 4
.IX Item "--doc, --help (-h), --usage (-?)"
\&\f(CW\*(C`\-\-usage\*(C'\fR give a short synopsis, \f(CW\*(C`\-\-help\*(C'\fR prints out a bit longe usage
information.
.Sp
\&\f(CW\*(C`\-\-doc\*(C'\fR prints out this man page. If an argument is given, it will only print
out the relevant sections. The following sections are recognized:
.RS 4
.IP "tutorial" 4
.IX Item "tutorial"
A 5 minute quickstart
.IP "reference" 4
.IX Item "reference"
Reference manual explaining the various operational modes.
.IP "options" 4
.IX Item "options"
Command line options available for \f(CW\*(C`check_jmx4perl\*(C'\fR
.IP "config" 4
.IX Item "config"
Documentation for the configuration syntax
.RE
.RS 4
.RE
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Using \f(CW\*(C`check_jmx4perl\*(C'\fR with a configuration file is the most powerful way for
defining Nagios checks. A simple configuration file looks like
.PP
.Vb 4
\&   # Define server connection parameters
\&   <Server tomcat>
\&      Url = http://localhost:8080/jolokia
\&   </Server>
\&
\&   # A simple heap memory check with a critical threshold of 
\&   # 90% of the maximal heap memory. 
\&   <Check memory_heap>     
\&     Value = java.lang:type=Memory/HeapMemoryUsage/used
\&     Base = java.lang:type=Memory/HeapMemoryUsage/max
\&     Unit = B
\&     Label = Heap\-Memory: %.2r% used (%.2v %u / %.2b %u)
\&     Name = Heap
\&     Critical = 90
\&   </Check>
.Ve
.PP
A configuration file is provided on the command line with the option
\&\f(CW\*(C`\-\-config\*(C'\fR. It can be divided into two parts: A section defining server
connection parameters and a section defining the checks themselves.
.SS "<Server>"
.IX Subsection "<Server>"
With \f(CW\*(C`<Server \f(CIname\f(CW>\*(C'\fR the connection parameters for a specific
server is defined. In order to select a server the \f(CW\*(C`\-\-server \f(CIname\f(CW\*(C'\fR command
line option has to be used. Within a \f(CW\*(C`<Server>\*(C'\fR configuration element,
the following keys can be used:
.IP "Url" 4
.IX Item "Url"
The \s-1URL\s0 under which the jolokia agent can be reached.
.IP "User, Password" 4
.IX Item "User, Password"
If authentication is switched on, the user and the credentials can be provided
with the \fBUser\fR and \fBPassword\fR directive, respectively. Currently only Basic
Authentication is supported.
.IP "Product" 4
.IX Item "Product"
The type of application server to monitor. This configuration can speed up
checks significantly, but only when aliases are used. By default when using
aliases, \f(CW\*(C`check_jmx4perl\*(C'\fR uses autodetection for determine the target's
platform. This results in at least one additional HTTP-Request. This
configuration does not has any effect when MBeans are always used with their
full name.
.IP "Proxy" 4
.IX Item "Proxy"
A \s-1HTTP\s0 Proxy \s-1URL\s0 and credentials can be given with the \f(CW\*(C`<Proxy>\*(C'\fR
sub-section. Example:
.Sp
.Vb 8
\&  <Server>
\&  ....
\&    <Proxy>
\&      Url = http://proxy.company.com:8001
\&      User = woody
\&      Password = buzz
\&    </Proxy>
\&  </Server>
.Ve
.RS 4
.IP "Url" 4
.IX Item "Url"
The proxy \s-1URL\s0
.IP "User, Password" 4
.IX Item "User, Password"
Optional user and credentials for accessing the proxy
.RE
.RS 4
.RE
.IP "Target" 4
.IX Item "Target"
With this directive, the JMX-Proxy mode can be switched on. As described in
section \*(L"Proxy mode\*(R", \f(CW\*(C`check_jmx4perl\*(C'\fR can operate in an agentless mode,
where the agent servlet is deployed only on an intermediated, so called
JMX-Proxy server, whereas the target platform only needs to export \s-1JMX\s0
information in the traditional way (e.g. via \s-1JSR\-160\s0 export). This mode is
especially useful if the agent is not allowed to be installed on the target
platform. However, this approach has some drawbacks and some functionality is
missing there, so the agent-mode is the recommended way. A sample JMX-Proxy
configuration looks like:
.Sp
.Vb 5
\&  <Target>
\&     Url = service:jmx:rmi:///jndi/rmi://tessin:6666/jmxrmi
\&     User = max
\&     Password = frisch 
\&  </Target>
.Ve
.Sp
For a discussion about the advantages and disadvantages of the JMX-Proxy mode,
please have a look at <http://labs.consol.de/> which contains some evaluations
of this mode for various application servers (e.g. JBoss and Weblogic).
.RS 4
.IP "Url" 4
.IX Item "Url"
The JMX-RMI Url to access the target platform.
.IP "User, Password" 4
.IX Item "User, Password"
User and password for authentication against the target server.
.RE
.RS 4
.RE
.SS "Single Check"
.IX Subsection "Single Check"
With \f(CW\*(C`<Check>\*(C'\fR a single check can be defined. It takes any option
available also available via the command line. Each check has a name, which can
be referenced from the commandline with the option \f(CW\*(C`\-\-check \f(CIname\f(CW\*(C'\fR.
.PP
Example:
.PP
.Vb 7
\&  <Check memory_heap>
\&    Value = java.lang:type=Memory/HeapMemoryUsage/used
\&    Base = java.lang:type=Memory/HeapMemoryUsage/max
\&    Label = Heap\-Memory:
\&    Name = Heap
\&    Critical = 90
\&  </Check>
.Ve
.PP
The \f(CW\*(C`<Check>\*(C'\fR section knows about the following directives:
.IP "Mbean" 4
.IX Item "Mbean"
The \f(CW\*(C`ObjectName\*(C'\fR of the MBean to monitor.
.IP "Attribute" 4
.IX Item "Attribute"
Attribute to monitor.
.IP "Operation" 4
.IX Item "Operation"
Operation, whose return value should be monitored. Either \f(CW\*(C`Attribute\*(C'\fR or
\&\f(CW\*(C`Operation\*(C'\fR should be given, but not both. If the operation takes arguments,
these need to be given as additional arguments to the \f(CW\*(C`check_jmx4perl\*(C'\fR command
line call. In the rare case, you need to call an overloaded operation (i.e. an
operation whose name exists multiple times on the same MBean but with different
parameter types), the argument types can be given within parentheses:
.Sp
.Vb 5
\&  <Check>
\&     ....
\&     Operation = checkUserCount(java.lang.String,java.lang.String)
\&     ...
\&  </Check>
.Ve
.IP "Argument" 4
.IX Item "Argument"
Used for specifying arguments to operation. This directive can be given multiple 
times for multiple arguments. The order of the directive determine the order of the 
arguments.
.Sp
.Vb 6
\&  <Check>
\&     ....
\&     Operation checkUserCount(java.lang.String,java.lang.String)
\&     Argument  Max
\&     Argument  Morlock    
\&  </Check>
.Ve
.IP "Alias" 4
.IX Item "Alias"
Alias, which must be known to \f(CW\*(C`check_jmx4perl\*(C'\fR. Use \f(CW\*(C`jmx4perl aliases\*(C'\fR to get
a list of all known aliases. If \f(CW\*(C`Alias\*(C'\fR is given as configuration directive,
\&\f(CW\*(C`Operation\*(C'\fR and/or \f(CW\*(C`Attribute\*(C'\fR is ignored. Please note, that using \f(CW\*(C`Alias\*(C'\fR
without \f(CW\*(C`Product\*(C'\fR in the server section leads to at least one additional \s-1HTTP\s0
request.
.IP "Path" 4
.IX Item "Path"
Path to apply to the attribute or operation return value. See \*(L"Paths\*(R" for
more information about paths.
.IP "Value" 4
.IX Item "Value"
Value is a shortcut for specifying \f(CW\*(C`MBean\*(C'\fR, \f(CW\*(C`Attribute\*(C'\fR and \f(CW\*(C`Path\*(C'\fR at
once. Simply concatenate all three parts via \f(CW\*(C`/\*(C'\fR (the \f(CW\*(C`Path\*(C'\fR part is
optional). Slashes within MBean names needs to be escaped with a \f(CW\*(C`\e\*(C'\fR
(backslash). Example:
.Sp
.Vb 1
\&  Value = java.lang:type=Memory/HeapMemoryUsage/used
.Ve
.Sp
is equivalent to
.Sp
.Vb 3
\&  MBean = java.lang:type=Memory
\&  Attribute = HeapMemoryUsage
\&  Path = used
.Ve
.IP "Base" 4
.IX Item "Base"
Switches on relative checks. See \*(L"Relative Checks\*(R" for more information
about relative checks. The value specified with this directive defines the
base value against which the relative value should be calculated. The format is
the same as for \f(CW\*(C`Value\*(C'\fR:
.Sp
.Vb 1
\&  Base = java.lang:type=Memory/HeapMemoryUsage/max
.Ve
.Sp
For relative checks, the \f(CW\*(C`Critical\*(C'\fR and \f(CW\*(C`Warning\*(C'\fR Threshold are interpreted
as a value between 0% and 100%.
.IP "BaseMBean, BaseAttribute and BasePath" 4
.IX Item "BaseMBean, BaseAttribute and BasePath"
As an alternative to specifying a base value in a combined fashion the
different parts can be given separately. \f(CW\*(C`BaseMBean\*(C'\fR and \f(CW\*(C`BaseAttribute\*(C'\fR
switches on relative checks and specifies the base value. An optional
\&\f(CW\*(C`BasePath\*(C'\fR can be used to provide the path within this base value.
.Sp
The example above can be also written as
.Sp
.Vb 3
\&  BaseMBean = java.lang:type=Memory
\&  BaseAttribute = HeapMemoryUsage
\&  BasePath = max
.Ve
.IP "Delta" 4
.IX Item "Delta"
Switches on incremental mode as described in section \*(L"Incremental
Checks\*(R". The value given is used for normalization the increase rate. E.g.
.Sp
.Vb 1
\&  Delta = 60
.Ve
.Sp
measures the growth rate per minute (60 seconds). If no value is given, the
absolute increase between two checks is used.
.IP "Numeric" 4
.IX Item "Numeric"
This directive switches on numeric mode, i.e. the given threshold values are
compared numerically against the returned \s-1JMX\s0 value. By default, the check mode
is determined by a heuristic algorithm.
.IP "String" 4
.IX Item "String"
String checks, which are switched on with this directive, are useful for
non-numeric thresholds. See \*(L"String checks\*(R" for more details.
.IP "Name" 4
.IX Item "Name"
The name to be used in the performance data. By default, a name is calculated
based on the MBean and attribute/operation name.
.IP "MultiCheckPrefix" 4
.IX Item "MultiCheckPrefix"
If this check is used within a multi check, this prefix is used to identify
this particular check in the output of a multicheck. It can be set to an empty
string if no prefix is required. By default the name as configured with \f(CW\*(C`Name\*(C'\fR
is used.
.IP "Label" 4
.IX Item "Label"
Format for setting the plugin output (not the performance data, use \f(CW\*(C`Name\*(C'\fR for
this). It takes a printf like format string which is described in detail in
\&\*(L"Output Tuning\*(R".
.IP "PerfData" 4
.IX Item "PerfData"
By default, performance data is appended for numeric checks. This can be tuned
by setting this directive to \*(L"false\*(R" (or \*(L"0\*(R", \*(L"no\*(R", \*(L"off\*(R") in which case
performance data is omitted. If using this in a base check, an inherited check
can switch performance data generation back on with \*(L"true\*(R" (or \*(L"1\*(R", \*(L"yes\*(R", \*(L"on\*(R")
.Sp
For relative checks, the value can be set to '%'. In this case, performance
data is added as relative values instead of the absolute value measured.
.IP "Unit" 4
.IX Item "Unit"
This specifies how the return value should be interpreted. This value, if
given, must conform to the unit returned by the \s-1JMX\s0
attribute/operation. E.g. for \f(CW\*(C`java.lang:type=Memory/HeapMemoryUsage/used\*(C'\fR
unit, if set, must be \f(CW\*(C`B\*(C'\fR since this \s-1JMX\s0 call returns the used memory measured
in bytes. The value given here is only used for shortening the plugin's output
automatically. For more details and for what units are available refer to
section \*(L"Output Tuning\*(R".
.IP "Critical" 4
.IX Item "Critical"
Specifies the critical threshold. If \f(CW\*(C`String\*(C'\fR is set (or the heuristics
determines a string check), this should be a string value as described in
\&\*(L"String checks\*(R". For relative checks, this should be a relative value in
ther range [0,100]. Otherwise, it is a simple numeric value which is used as
threshold. For numeric checks, the threshhold can be given in the format
defined at
<http://nagiosplug.sourceforge.net/developer\-guidelines.html#THRESHOLDFORMAT>.
.IP "Warning" 4
.IX Item "Warning"
Defines the warning threshold the same way as described for the \f(CW\*(C`Critical\*(C'\fR
threshold.
.IP "Null" 4
.IX Item "Null"
Replacement value when an attribute is null or an operation returns a null
value. This value then can be used in string checks in order to check against
null values. By default, this value is "\f(CW\*(C`null\*(C'\fR".
.IP "Method" 4
.IX Item "Method"
\&\s-1HTTP\s0 Method to use for the check. Available values are \f(CW\*(C`GET\*(C'\fR or \f(CW\*(C`POST\*(C'\fR for
\&\s-1GET\s0 or \s-1POST\s0 HTTP-Requests, respectively. By default a method is determined
automatically. The value can be given case insensitively.
.IP "Use" 4
.IX Item "Use"
In order to use parent checks, this directive specifies the parent along with
any parameters passed through. For example,
.Sp
.Vb 1
\&  Use = memory_relative_base(80,90),base_label
.Ve
.Sp
uses a parent check named \f(CW\*(C`memory_relative_base\*(C'\fR, which must be a check
defined in the same configuration file (or an imported on). Additionally, the
parameters \f(CW80\fR and \f(CW90\fR are passed to this check (which can be accessed
there via the argument placeholders \f(CW$0\fR and \f(CW$1\fR). See \*(L"Parent checks\*(R"
and \*(L"Parameterized checks\*(R" for more information about check inheritance.
.Sp
Multiple parents can be given by providing them in a comma separated list.
.IP "Script" 4
.IX Item "Script"
For complex checks which can not be realized with the configurations described
until yet, it is possible to use a Perl script snippet to perfrom arbitrary
logic. The content of this script is typically provided as an HERE-document
(see example below). It comes with a predefined variable \f(CW$j4p\fR which is an
instance of JMX::Jmx4Perl so that it can be used for a flexible access to
the server. Note that this scriptlet is executed separately and doesn't not
benefit from the optimization done for bulk or relative checks. Check
parameters can be accessed as ${0}, ${1}, .. but since these are also valid
Perl variables (and hence can be overwritten accidentially), it is recommended
to assign them to local variable before using them. In summary, script based
checks are powerful but might be expensive.
.Sp
Example:
.Sp
.Vb 1
\&  Script <<EOT
\&  
\&  my $pools = $j4p\->search("java.lang:type=MemoryPool,*");
\&  my @matched_pools;
\&  my $pattern = "${0}";
\&  for my $pool (@$pools) {   
\&     push @matched_pools,$pool if $pool =~ /$pattern/;   
\&  }
\&  return $j4p\->get_attribute($matched_pools[0],"Usage","used");
\&  
\&  EOT
.Ve
.SS "Includes"
.IX Subsection "Includes"
Checks can be organized in multiple configuration files. To include another
configuration file, the \f(CW\*(C`include\*(C'\fR directive can be used:
.PP
.Vb 3
\&  include tomcat.cfg
\&  include threads.cfg
\&  include memory.cfg
.Ve
.PP
If given as relative path, the configuration files are looked up in the same
directory as the current configuration file. Absolute paths can be given, too.
.SS "Parent checks"
.IX Subsection "Parent checks"
With \f(CW\*(C`check_jmx4perl\*(C'\fR parent checks it is possible to define common base
checks, which are usable in various sub-checks. Any \f(CW\*(C`<Check>\*(C'\fR can be a
parent check as soon as it is referenced via a \f(CW\*(C`Use\*(C'\fR directive from within
another check's definition. When a check with a parent check is used, its
configuration is merged with this from the parent check with own directives
having a higher priority. Parent checks can have parent checks as well (and so
on).
.PP
For example, consider the following configuration:
.PP
.Vb 5
\&  <Check grand_parent>
\&     Name grand_parent
\&     Label GrandPa
\&     Critical 10
\&  </Check>
\&
\&  <Check parent_1>
\&     Use grand_parent
\&     Name parent_1
\&     Critical 20
\&  </Check>
\&
\&  <Check parent_2>
\&     Name parent_2
\&     Warning 20
\&  </Check> 
\&
\&  <Check check>
\&     Use parent_1,parent_2
\&     Warning 40
\&  </Check>
.Ve
.PP
In this scenario, when check \f(CW\*(C`check\*(C'\fR is used, it has a \f(CW\*(C`Name\*(C'\fR "\f(CW\*(C`parent_2\*(C'\fR"
(last parent check in \f(CW\*(C`Use\*(C'\fR), a \f(CW\*(C`Label\*(C'\fR \*(L"GrandPa\*(R" (inherited from
\&\f(CW\*(C`grand_parent\*(C'\fR via \f(CW\*(C`parent_1\*(C'\fR), a \f(CW\*(C`Critical\*(C'\fR 20 (inherited from \f(CW\*(C`parent_1\*(C'\fR)
and a \f(CW\*(C`Warning\*(C'\fR 40 (directly give in the check definition).
.PP
A parent value of a configuration directive can be refered to with the
placeholder \f(CW$BASE\fR. For example:
.PP
.Vb 3
\&  <Check parent>
\&    Name Parent
\&  </Check>
\&
\&  <Check check>
\&    Use parent
\&    Name Child: $BASE
\&  </Check>
.Ve
.PP
This will lead to a \f(CW\*(C`Name\*(C'\fR "\f(CW\*(C`Child: Parent\*(C'\fR" since \f(CW$BASE\fR is resolved to
the parent checks valus of \f(CW\*(C`Name\*(C'\fR, \f(CW"Parent"\fR in this case. The base value is
searched upwards in the inheritance hierarchy (parent, grand parent, ...) until
a value is found. If nonen is found, an empty string is used for \f(CW$BASE\fR.
.SS "Parameterized checks"
.IX Subsection "Parameterized checks"
Checks can be parameterized, i.e. they can take arguments which are replaced in
the configuration during runtime. Arguments are used in check definition via
the positional format \f(CW$0\fR, \f(CW$1\fR, .... (e.g. \f(CW$0\fR is the first argument
given). Arguments can either be given on the command line as extra arguments to
\&\f(CW\*(C`check_jmx4perl\*(C'\fR or within the \f(CW\*(C`Use\*(C'\fR directive to provide arguments to parent
checks.
.PP
Example:
.PP
.Vb 4
\&  <Check parent>
\&    Name $0
\&    Label $1
\&  </Check>
\&
\&  <Check child_check>
\&    Use parent($0,"Check\-Label")   
\&    ....
\&  </Check>
\&
\&  $ check_jmx4perl \-\-check child_check .... "Argument\-Name"
\&  OK \- Check\-Label | \*(AqArgument\-Name\*(Aq= ....
.Ve
.PP
As it can be seen in this example, arguments can be propagated to a parent
check. In this case, \f(CW$0\fR from the command line (\f(CW\*(C`Argument\-Name\*(C'\fR) is passed
through to the parent check which uses it in the \f(CW\*(C`Name\*(C'\fR directive. \f(CW$1\fR from
the parent check is replaced with the value "\f(CW\*(C`Check\-Label\*(C'\fR" given in the
\&\f(CW\*(C`Use\*(C'\fR directive of the child check.
.PP
Parameters can have default values. These default values are taken in case an
argument is missing (either when declaring the parent check or missing from the
command line). Default values are specified with
\&\f(CW${\fR\fIarg-nr\fR\f(CW\*(C`:\*(C'\fR\fIdefault\fR\f(CW\*(C`}\*(C'\fR. For example,
.PP
.Vb 5
\& <Check relative_base>
\&   Label = %.2r% used (%.2v %u / %.2b %w)
\&   Critical = ${0:90}
\&   Warning = ${1:80}
\& </Check>
.Ve
.PP
defines a default value of 90% for the critical threshold and 80% for the
warning threshold. If a child check uses this parent definition and only wants
to ommit the first parameter (but explicitely specifying the second parameter)
it can do so by leaving the first parameter empty:
.PP
.Vb 3
\&  <Check child>
\&     Use relative_base(,70)
\&  </Check>
.Ve
.SS "Multichecks"
.IX Subsection "Multichecks"
Multiple checks can be combined to a single \fIMultiCheck\fR. The advantage of a
multi check is, that multiple values can be retrieved from the server side with
a single \s-1HTTP\s0 request. The output is conformant to Nagios 3 multiline
format. It will lead to a \f(CW\*(C`CRITICAL\*(C'\fR value as soon as one check is critical,
same for \f(CW\*(C`WARNING\*(C'\fR. If both, \f(CW\*(C`CRITICAL\*(C'\fR and \f(CW\*(C`WARNING\*(C'\fR is triggered by two or
more checks, then \f(CW\*(C`CRITICAL\*(C'\fR take precedence.
.PP
If a single check within a multi check fails with an exception (e.g. because an
MBean is missing), its state becomes \f(CW\*(C`UNKNOWN\*(C'\fR. \f(CW\*(C`UNKNOWN\*(C'\fR is the highest
state in so far that it shadows even \f(CW\*(C`CRITICAL\*(C'\fR (i.e. if a single check is
\&\f(CW\*(C`UNKNOWN\*(C'\fR the whole multi check is \f(CW\*(C`UNKNOWN\*(C'\fR, too). This can be changed by
providing the command line option \f(CW\*(C`\-\-unknown\-is\-critical\*(C'\fR in which case all
\&\f(CW\*(C`UNKNOWN\*(C'\fR errors are mapped to \f(CW\*(C`CRITICAL\*(C'\fR.
.PP
A multi-check can be defined with the directive \f(CW\*(C`<MultiCheck>\*(C'\fR, which
contain various references to other \f(CW\*(C`<Check>\*(C'\fR definitions or other
multi check definitions.
.PP
Example:
.PP
.Vb 4
\&  <MultiCheck all>
\&    MultiCheck memory
\&    MultiCheck threads
\&  </MultiCheck>
\&
\&  <MultiCheck memory>
\&    Check memory_heap($0,80)
\&    Check memory_pool_base("CMS Perm Gen",90,80)
\&  </MultiCheck>
\&
\&  <MultiCheck threads>
\&    Check thread_inc
\&    Check thread_deadlock
\&  </MultiCheck>
.Ve
.PP
Here a multi check group \fImemory\fR has been defined with reference to two
checks, which must exist somewhere else in the configuration file. As it can be
seen, parameters can be given through to the check in the usual way (literally
or with references to command line arguments). The group \fIall\fR combines the
two groups \fImemory\fR and \fIthread\fR, containing effectively four checks.
.PP
A multi-check is referenced from the command line like any other check:
.PP
.Vb 1
\&  $ check_jmx4perl .... \-\-check all 90
.Ve
.PP
(90 is the argument which replaces \f(CW$0\fR in the definition above).
.PP
The summary label in a multi check can be configured, too.
.PP
Example:
.PP
.Vb 5
\&  <MultiCheck memory>
\&    SummaryOk All %n checks are OK
\&    SummaryFailure %e of %n checks failed [%d]
\&    ...
\&  </MultiCheck>
.Ve
.PP
These format specifiers can be used:
.PP
.Vb 3
\&  %n        Number of all checks executed 
\&  %e        Number of failed checks
\&  %d        Details which checks failed
.Ve
.SS "Predefined checks"
.IX Subsection "Predefined checks"
\&\f(CW\*(C`check_jmx4perl\*(C'\fR comes with a collection of predefined configuration for
various application servers. The configurations can be found in the directory
\&\fIconfig\fR within the toplevel distribution directory. The configurations are
fairly well documented inline.
.PP
\fIcommon.cfg\fR
.IX Subsection "common.cfg"
.PP
Common check definitions, which can be used as parents for own checks. E.g. a
check \f(CW\*(C`relative_base\*(C'\fR can be used as parent for getting a nicely formatted
output message.
.PP
\fImemory.cfg\fR
.IX Subsection "memory.cfg"
.PP
Memory checks for heap and non-heap memoy as well as for various memory
pools. Particularly interesting here is the so called \fIPerm Gen\fR pool as it
holds the java type information which can overflow e.g after multiple
redeployments when the old classloader of the webapp can't be cleared up by the
garbage collector (someone might still hold a reference to it).
.PP
\fIthreads.cfg\fR
.IX Subsection "threads.cfg"
.PP
Checks for threads, i.e. checking for the tread count increase rate. A check
for finding out deadlocks (on a \s-1JDK 6 VM\s0) is provided, too.
.PP
\fIjetty.cfg\fR
.IX Subsection "jetty.cfg"
.PP
Various checks for jetty like checking for running servlets, thread count within
the app server, sessions (number and lifing time) or requests per minute.
.PP
\fItomcat.cfg\fR
.IX Subsection "tomcat.cfg"
.PP
Mostly the same checks as for jetty, but for tomcat as application server.
.PP
\fIwebsphere.cfg\fR
.IX Subsection "websphere.cfg"
.PP
WebSphere specific checks, which uses the configuration files below the
`websphere/` directory. For this checks to work, a customized Jolokia agent
with \s-1JSR\-77\s0 extensions is required. The GitHub project for this enhanced agents
can be found at <https://github.com/rhuss/jolokia\-extra> and downloaded at
Maven Central
(<http://central.maven.org/maven2/org/jolokia/extra/jolokia\-extra\-war/>)
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of jmx4perl.
.PP
Jmx4perl is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.
.PP
jmx4perl is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0 See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with jmx4perl.  If not, see <http://www.gnu.org/licenses/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
roland@cpan.org
